
/*-
 * ============LICENSE_START==========================================
 * OPENECOMP - DCAE
 * ===================================================================
 * Copyright (c) 2017 AT&T Intellectual Property. All rights reserved.
 * ===================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0 
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============LICENSE_END============================================
 */
	
// Autogenerated
// Do not edit. No need to extend this class.
package org.openecomp.ncomp.sirius.manager.agent.servers.monitoring.south;

import org.openecomp.ncomp.sirius.manager.AbstractClient;
import org.openecomp.ncomp.sirius.manager.HighAvailabilityClient;
import org.openecomp.ncomp.sirius.manager.Jetty8Client;

import org.apache.log4j.Logger;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.openecomp.ncomp.sirius.manager.server.impl.SouthBoundApiImpl;
import org.openecomp.ncomp.sirius.manager.server.ServerPackage;


import org.openecomp.ncomp.sirius.manager.agent.servers.monitoring.AgentSiriusManagerAgentServer; 



 
@SuppressWarnings("unchecked")
public class AgentSouthBoundApiClient extends SouthBoundApiImpl {
	public static final Logger logger = Logger.getLogger(AgentSouthBoundApiClient.class);
	public AbstractClient client;

	public AgentSouthBoundApiClient(String file, String name) {
		AgentSiriusManagerAgentServer.ecoreSetup(); 
		client = new Jetty8Client(file,name);
		client.add("/south", this);
	}

	public AgentSouthBoundApiClient(String file, String name1, String name2) {
		HighAvailabilityClient client1 = new HighAvailabilityClient(file,name1,name2);
		client = client1.all; // requests should be forwarded to all.
		client.add("/south", this);
	}


	@Override
	public void logs(org.json.JSONObject cx, EList<org.openecomp.ncomp.core.logs.LogMessage> logs) {
		EClass c = ServerPackage.eINSTANCE.getSouthBoundApi();
		client.operationPath("/south", c, "logs", cx != null && cx.has("timeout") ? cx.getLong("timeout") : null, cx,logs);
	}

	@Override
	public void metrics(org.json.JSONObject cx, EList<org.openecomp.ncomp.core.metrics.Metric> metrics) {
		EClass c = ServerPackage.eINSTANCE.getSouthBoundApi();
		client.operationPath("/south", c, "metrics", cx != null && cx.has("timeout") ? cx.getLong("timeout") : null, cx,metrics);
	}

	@Override
	public void properties(org.json.JSONObject cx, EList<org.openecomp.ncomp.sirius.manager.properties.AbstractProperty> l) {
		EClass c = ServerPackage.eINSTANCE.getSouthBoundApi();
		client.operationPath("/south", c, "properties", cx != null && cx.has("timeout") ? cx.getLong("timeout") : null, cx,l);
	}

}
