
/*-
 * ============LICENSE_START==========================================
 * OPENECOMP - DCAE
 * ===================================================================
 * Copyright (c) 2017 AT&T Intellectual Property. All rights reserved.
 * ===================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0 
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============LICENSE_END============================================
 */
	
// Autogenerated
// Do not edit but extend this class as needed
package org.openecomp.ncomp.sirius.manager.agent.servers.monitoring;

import static org.openecomp.ncomp.utils.PropertyUtil.getPropertiesFromClasspath;

import java.io.IOException;
import java.util.Properties;
import java.util.TimeZone;

import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EFactory;

import org.openecomp.ncomp.sirius.manager.Jetty8Server;
import org.openecomp.ncomp.sirius.manager.ManagementServer;
import org.openecomp.ncomp.sirius.manager.ISiriusServer;

import org.openecomp.ncomp.sirius.manager.agent.monitoring.SiriusManagerAgentServer;

    
import org.openecomp.ncomp.sirius.manager.agent.servers.monitoring.gui.AgentModelFactory;
    
import org.openecomp.ncomp.sirius.manager.agent.servers.monitoring.south.AgentServerFactory;





public class AgentSiriusManagerAgentServerServer implements ISiriusServer {
    public static final Logger logger = Logger.getLogger(AgentSiriusManagerAgentServerServer.class);
    String serverPath;
    ManagementServer server;
    AgentSiriusManagerAgentServer controller;
    String directory = "data";
//      LocationControllerApi api ;
    Jetty8Server webServer;
    AgentMonitoringFactory f = new AgentMonitoringFactory(this);
    
    String guiPath;
    ManagementServer guiServer;
    
    String southPath;
    ManagementServer southServer;


    public AgentSiriusManagerAgentServerServer(String filename) throws IOException {
		logger.warn("controller restarting");
		AgentSiriusManagerAgentServer.ecoreSetup(); 
		props = getPropertiesFromClasspath(filename);
        serverPath = (String) props.get("server.dir");
        server = new ManagementServer(f, "SiriusManagerAgentServer", serverPath, filename);
        server.addFactory(f);

        server.addRuntimeFactories(this);
        server.start();
    }
    public void runWebserver() throws IOException {
        controller = (AgentSiriusManagerAgentServer) server.find("/").o;
        webServer = new Jetty8Server("monitoring.properties");
        webServer.add("/resources",server);


    
		EFactory guiFactory = new AgentModelFactory(this);
		guiPath = serverPath + "/gui";
		guiServer = new ManagementServer(guiFactory, "GuiClientApi", guiPath, "gui.properties");
		guiServer.start();
		webServer.add("/gui",guiServer);
    
		EFactory southFactory = new AgentServerFactory(this);
		southPath = serverPath + "/south";
		southServer = new ManagementServer(southFactory, "SouthBoundApi", southPath, "south.properties");
		southServer.start();
		webServer.add("/south",southServer);



        logger.info("Joining webserver");
        webServer.join();
    }
    static Properties props = null;
    public static void main(String []args) throws IOException {
            // ALWAYS USE GMT.
            TimeZone.setDefault(TimeZone.getTimeZone("GMT"));
            
            AgentSiriusManagerAgentServerServer s = new AgentSiriusManagerAgentServerServer("monitoring.properties");
            s.runWebserver();
    }
	public SiriusManagerAgentServer getController() {
		return controller;
	}
	public ManagementServer getServer() {
		return server;
	}
}
