
/*-
 * ============LICENSE_START==========================================
 * OPENECOMP - DCAE
 * ===================================================================
 * Copyright (c) 2017 AT&T Intellectual Property. All rights reserved.
 * ===================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0 
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ============LICENSE_END============================================
 */
	
// Autogenerated
// Do not edit. No need to extend this class.
package org.openecomp.ncomp.sirius.manager.agent.servers.monitoring.south;





import java.io.InputStream;

import org.openecomp.ncomp.sirius.manager.IRequestHandler;
import org.openecomp.ncomp.sirius.manager.ISwaggerHandler;
import org.openecomp.ncomp.sirius.manager.ISiriusPlugin;
import org.openecomp.ncomp.sirius.manager.ISiriusServer;
import org.openecomp.ncomp.sirius.manager.ISiriusProvider;
import org.openecomp.ncomp.sirius.manager.ManagementServer;
import org.openecomp.ncomp.sirius.manager.SwaggerUtils;
import org.openecomp.ncomp.sirius.function.FunctionUtils;
import org.openecomp.ncomp.component.ApiRequestStatus;

import org.apache.log4j.Logger;

import org.openecomp.ncomp.sirius.manager.logging.NcompLogger;
import org.openecomp.logger.StatusCodeEnum;
import org.openecomp.logger.EcompException;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.json.JSONObject;

import java.util.Date;

import org.openecomp.ncomp.sirius.manager.agent.servers.monitoring.south.logging.SouthBoundApiOperationEnum;
import org.openecomp.ncomp.sirius.manager.agent.servers.monitoring.south.logging.SouthBoundApiMessageEnum;




import org.openecomp.ncomp.sirius.manager.server.impl.SouthBoundApiImpl;



public class AgentSouthBoundApi extends SouthBoundApiImpl implements ISiriusProvider {
	public static final Logger logger = Logger.getLogger(AgentSouthBoundApi.class);
	static final NcompLogger ecomplogger = NcompLogger.getNcompLogger();
	public AgentSouthBoundApiProvider controller;
	ISiriusServer server;

	public AgentSouthBoundApi(ISiriusServer server) {
		this.server = server;
		this.controller = new AgentSouthBoundApiProvider(server,this);
	}

	public void logs(org.json.JSONObject cx, EList<org.openecomp.ncomp.core.logs.LogMessage> logs) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "logs", ApiRequestStatus.START, duration_,cx,logs);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(SouthBoundApiOperationEnum.SouthBoundApi_logs,server,this);
		ecomplogger.recordMetricEventStart(SouthBoundApiOperationEnum.SouthBoundApi_logs,"self:" + ManagementServer.object2ref(this));
		try {
			 controller.logs(cx,logs);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "logs", ApiRequestStatus.ERROR, duration_,cx,logs);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(SouthBoundApiMessageEnum.REQUEST_FAILED_logs, e.toString());
			EcompException e1 =  EcompException.create(SouthBoundApiMessageEnum.REQUEST_FAILED_logs,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, SouthBoundApiMessageEnum.REQUEST_FAILED_logs, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "logs", ApiRequestStatus.OKAY, duration_,cx,logs);
		
	}

	public void metrics(org.json.JSONObject cx, EList<org.openecomp.ncomp.core.metrics.Metric> metrics) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "metrics", ApiRequestStatus.START, duration_,cx,metrics);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(SouthBoundApiOperationEnum.SouthBoundApi_metrics,server,this);
		ecomplogger.recordMetricEventStart(SouthBoundApiOperationEnum.SouthBoundApi_metrics,"self:" + ManagementServer.object2ref(this));
		try {
			 controller.metrics(cx,metrics);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "metrics", ApiRequestStatus.ERROR, duration_,cx,metrics);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(SouthBoundApiMessageEnum.REQUEST_FAILED_metrics, e.toString());
			EcompException e1 =  EcompException.create(SouthBoundApiMessageEnum.REQUEST_FAILED_metrics,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, SouthBoundApiMessageEnum.REQUEST_FAILED_metrics, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "metrics", ApiRequestStatus.OKAY, duration_,cx,metrics);
		
	}

	public void properties(org.json.JSONObject cx, EList<org.openecomp.ncomp.sirius.manager.properties.AbstractProperty> l) {
		
		long duration_ = 0;
		if (server != null)
			server.getServer().recordApi(null, this, "properties", ApiRequestStatus.START, duration_,cx,l);
		Date now_ = new Date();
		ecomplogger.recordAuditEventStartIfNeeded(SouthBoundApiOperationEnum.SouthBoundApi_properties,server,this);
		ecomplogger.recordMetricEventStart(SouthBoundApiOperationEnum.SouthBoundApi_properties,"self:" + ManagementServer.object2ref(this));
		try {
			 controller.properties(cx,l);
		}
		catch (Exception e) {
			duration_ = new Date().getTime()-now_.getTime();
			if (server != null)
				server.getServer().recordApi(null, this, "properties", ApiRequestStatus.ERROR, duration_,cx,l);
			System.err.println("ERROR: " + e);
			ecomplogger.warn(SouthBoundApiMessageEnum.REQUEST_FAILED_properties, e.toString());
			EcompException e1 =  EcompException.create(SouthBoundApiMessageEnum.REQUEST_FAILED_properties,e,e.getMessage());
			ecomplogger.recordMetricEventEnd(StatusCodeEnum.ERROR, SouthBoundApiMessageEnum.REQUEST_FAILED_properties, e.getMessage());
			throw e1;
		}
		ecomplogger.recordMetricEventEnd();
		duration_ = new Date().getTime()-now_.getTime();
		if (server != null)
			server.getServer().recordApi(null, this, "properties", ApiRequestStatus.OKAY, duration_,cx,l);
		
	}








	public static void ecoreSetup() {
		AgentSouthBoundApiProvider.ecoreSetup();
	}
	public AgentSouthBoundApiProvider getSiriusProvider() {
		return controller;
	}
}
